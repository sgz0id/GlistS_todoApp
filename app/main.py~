#importing the main flask library and other essentials
from flask import Flask, request, render_template, url_for, redirect
#we will use bootstrap in our project
from flask_bootstrap import Bootstrap
#we are using flask form for sign-up and login
from flask_wtf import FlaskForm
#importing the credentials for login and signup from wt forms
# StringField -> Name, Email
# PasswordField -> Password
#BooleanField -> "Remember Me" check box
from wtforms import StringField, PasswordField, BooleanField
#importing the validators
from wtforms.validators import InputRequired, Email, Length
#importing SQL Alchemy for the database
from flask_sqlalchemy import SQLAlchemy
#hash the password
from werkzeug.security import generate_password_hash,check_password_hash
#adding flask login
from flask_login import LoginManager,UserMixin,login_user,login_required,logout_user,current_user

#creating our app with the Flask object
app = Flask(__name__)
#adding secret key for CSRF token
app.config['SECRET_KEY']='ThisisGlistSSecretKey!'
#configuring the sqlite 3 database
app.config['SQLALCHEMY_DATABASE_URI']='sqlite:///database.db'
Bootstrap(app)
#linking the database with the app
db=SQLAlchemy(app)
#creating login manager
login_manager=LoginManager()
#instializing the login manager to the app
login_manager.init_app(app)
#setting up login view
login_manager.login_view='login_page'

#adding the database
#user database
class User(UserMixin,db.Model):
    #prmary key of all the entries in the database
    id=db.Column(db.Integer,primary_key=True)
    #username->max length=20, username should be unique
    username=db.Column(db.String(20),unique=True)
    #email->max length=50,email should be unique
    email=db.Column(db.String(50),unique=True)
    #password->max length=80
    password=db.Column(db.String(80))
    
#function for login manager
@login_manager.user_loader
def load_user(user_id):
    #querying from the user class using user ID
    return User.query.get(int(user_id))

#adding the form
#class for register form
class RegisterForm(FlaskForm):
    #the email for the registration form
    email=StringField('email',validators=[InputRequired(),Email(message='Invalid email'),Length(max=50)])
    #the username for the registration form
    username=StringField('username',validators=[InputRequired(),Length(min=4,max=20)])
    #the password for the registration form
    password=PasswordField('password',validators=[InputRequired(),Length(min=8,max=80)])
#class form ends

#class for login form
class LoginForm(FlaskForm):
    #the username field for the form
    username=StringField('username',validators=[InputRequired(),Length(min=4,max=20)])
    # the pasword field for the form
    password=PasswordField('password',validators=[InputRequired(),Length(min=8,max=80)])
    #remember me check box
    remember=BooleanField('remember me')
#class form ends
    
#Home Page
@app.route('/')
def home_page():
    return render_template('home.html')

#Sign-up Page
@app.route('/signup',methods=['GET','POST'])
def signup_page():
    form=RegisterForm()
    #generating hashed password
    #the method sha265 generates a hash 80characters long thats why the maximum length is chosen as 80 for password field
    hashed_password=generate_password_hash(form.password.data,method='sha256')
    #if the form is submitted
    if form.validate_on_submit():
        #return '<h1>'+form.email.data+' '+form.username.data+' '+form.password.data+' '+'</h1>'
        new_user=User(username=form.username.data,email=form.email.data,password=hashed_password)
        db.session.add(new_user)
        db.session.commit()
        return "<h1>New User has been Created!</h1>"
    return render_template('signup.html', form=form)

#Log-in Page     
@app.route('/login',methods=['GET','POST'])
def login_page():
    form=LoginForm()
    #if the form is subitted
    if form.validate_on_submit():
        #return '<h1>'+form.username.data+' '+form.password.data+' '+'</h1>'
        #check if username already exists in the DB
        #filtering the DB using the username
        #.first()-> as second and third fields are email and password respectively in the DB
        user=User.query.filter_by(username=form.username.data).first()
        #if user exist, check the password
        if user:
            #to access password from DB->user.password (simple!)
            if check_password_hash(user.password,form.password.data):
                #before redirecting to dashboard make sure to be logged in
                login_user(user,remember=form.remember.data)
                return redirect(url_for('todo_dashboard'))
        return "<h1>Invalid Username or Password</h1>"
    return render_template('login.html',form=form)

#Dashboard where the todo-app starts for each user
@app.route('/dashboard')
#not being able to access dashboard always
#have to login/signup to access dashboard
@login_required
def todo_dashboard():
    return render_template('todo_dashboard.html',name=current_user.username)
#logout facitlity
@app.route('/login')
@login_required
def logout():
    logout_user()
    return redirect(url_for('home_page'))

if "__main__"==__name__:
    app.run(debug=True)
    
